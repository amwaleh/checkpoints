#!/usr/bin/python
# -*- coding: utf-8 -*-
from checkpoint1 import Space
import os

# office reads room allocation from file 'rooms.txt'

office = Space(6)

# living work space is generated by inputing the parameters

living = Space(4, 'Living', 10)


def view_room_allocations():
    while True:
        print 'Select Room to print?\n'
        print '1. Living \n'
        print '2. Office\n'
        print '3. Both\n'
        print '0. Exit\n'

        try:

            report = int(raw_input('Choose Room to print : '))
            if report in [1, 2, 3, 0]:
                if report == 0:
                    break
                if report == 1:
                    print living.print_allocation()
                if report == 2:
                    print office.print_allocation()
                if report == 3:
                    print '==' * 20
                    print '\n'
                    print living.print_allocation()
                    print '==' * 20
                    print '\n'
                    print office.print_allocation()
                break
        except:
            print 'ERROR: insert 1,2 or 3'

    # --------------------------------------Allocate rooms


def view_room_status():
    while True:
        print 'Select Rooms ?\n'
        print '1. Living \n'
        print '2. Office\n'
        print '3. Both\n'
        print '0. exit'

   

        report = int(raw_input('Insert room type: '))
        if report in [0, 1, 2, 3, 4]:
            print '\n' * 2
            if report == 0:
                break

            if report == 1:

                # print_status returns a list [empty_spaces, Summary of room status ]
                # empty _spaces is a int

                d = living.print_status()
                print 'Empty Spaces = {} '.format(d[0])
                print d[1]

            if report == 2:
                d = office.print_status()
                print 'Empty Spaces = {} '.format(d[0])
                print d[1]

            if report == 3:
                d = living.print_status()
                print 'Empty Living Spaces = {} '.format(d[0])
                print d[1]

                d = office.print_status()
                print 'Empty Office Spaces = {} '.format(d[0])
                print d[1]

            break

       


def allocate_room():
    while True:
        print 'SECTION A: CHOOSE ROOM'
        
        print '1: Allocate Living Space'
        print '2: Allocate both living and office'
        print '3: Allocate Office'
        print '0: Exit\n'
        try:
            room_type = int(raw_input('Choose room to allocate: '))
            if room_type in [0, 1, 2, 3]:
                break
        except:
            print 'ERROR: Insert 0, 1, or 2'

    while True:
        if room_type == 0 :
            break

        print 'SECTION B:CHOOSE INPUT METHOD '
        print '\t3: to insert names directly\n'
        print '\t4: load names from a file\n'
        print '\t5: load names from a file'
        try:
            source = int(raw_input('Input Method: '))
        except :
            print'Insert 3, 4 or 5'

        if source in [3, 4, 5]:

            # manual Input of names

            if source == 3:
                manual_input(room_type)

            # Loading Files from a file

            if source == 4:
                load_from_file(room_type)

            # Load automatically

            if source == 5:
                load_automatically(room_type)
        break


def load_automatically(room_type):
    file_path = 'data/allocation.txt'
    if room_type == 3:
        print office_allocate(file_path)
    if room_type == 1:
        print living_allocate(file_path)
    if room_type == 2:
        print office_allocate(file_path)
        print living_allocate(file_path)
  


def load_from_file(room_type):
    try:

        file_path = raw_input(r"Insert full path of file :")

        if room_type == 3:
            print office_allocate(file_path)
        if room_type == 1:
            print living_allocate(file_path)
        if room_type == 2:
            print office_allocate(file_path)
            print living_allocate(file_path)
    except:
        print 'Error file did not load'


def manual_input(room_type):
    while True:
        try :
            inp = raw_input("Type Name or 'exit' to stop :")

            # exit code if input is 'exit'

            if inp == 'exit':
                break

            # allocate room to person

            if room_type == 3:
                print office.allocate_room(inp)
            if room_type == 1:
                print living.allocate_room(inp)
            if room_type == 2:
                print office.allocate_room(inp)
                print living.allocate_room(inp)

        except:
            print ('Room does not exist ')
   
         

 

# ---------------------- View Room Cccupants
def view_room_occupant():
    while True:
        print 'Select Rooms ?\n'
        print '1. Living \n'
        print '2. Office\n'
        print '0. exit\n'

        try:

            report = int(raw_input('Insert room type: '))
        except:
            print 'Type 1,2 or 0'
            break

        if report == 0:
            break

        room_num = raw_input('Insert room name: ')

        if report in [1, 2, 0]:
            print '\n' * 2
            i = 0

            if report == 1:
                for occupant in living.get_room_occupants(room_num):
                    print '{}: {}'.format(i, occupant)
                    i += 1

            if report == 2:
                for occupant in office.get_room_occupants(room_num):
                    print '{}: {}'.format(i, occupant)
                    i += 1

            print '\n' * 2

            if i > 0:
                show_edit_options(room_num, report)
        break


def show_edit_options(room_num, room_type):
    report = room_type
    print 'Choose Occupant to edit'
    edit = int(raw_input('Choose Occupant : '))
    print """ Chose action
 \
            1: change Name
 \
            2: Delete
 \
            0: exit
 \
        """
    try : 
        action = int(raw_input('Choose action : '))
    except :
        print 'type 1,2 or 0'
    if action == 0:
        pass

    # choose either to rename or delete a name from the
    # list

    if action in [1, 2]:
        if action == 1:
            if report is 1:

                living.room_list[room_num][edit] = \
                    raw_input('Insert New Name : ')
        print living.room_list[room_num][edit]

        if report is 2:

            office.room_list[room_num][edit] = \
                raw_input('Insert New Name : ')
        print living.room_list[room_num][edit]

    # Choose delete a name from a room

    if action == 2:
        if report is 1:
            del living.room_list[room_num][edit]
        living.save_list()
        print living.room_list[room_num]
        if report == 2:
            del office.room_list[room_num][edit]
            office.save_list()
            print office.room_list[room_num]


def living_allocate(path):

    if os.path.isfile(path):

        destination = living.get_from_file(path)

        # intitialize counter to check index reached

        i = 0

        # intialize counter to check how many rooms have been allocated

        z = 0
        print '==' * 10 + ' List of allocation Living ' + '==' * 10 \
            + '\n'
        for x in destination:
            if 'Y' in x and 'FELLOW' in x:
                space = living.allocate_room(x[0] + ' ' + x[1])
                print space[:2]

                # if the rooms are full break the loop

                if space[0] == -1:
                    break

                # add to allocated counter

                z += 1
            i += 1

        print 'People allocated = {}'.format(z)
        print '\n'

        # Pass the unallocated list for printing

        unallocated(destination[i:], living.type_of_room)
    else:

        print 'FILE NOT FOUND %s' % path


def office_allocate(path):

    d = office.get_from_file(path)
    print '==' * 10 + ' List of allocation Office ' + '==' * 10 + '\n'

    # Introduce a counter to know how many elements have been processed

    i = 0
    for x in d:
        s = office.allocate_room(x[0] + ' ' + x[1])
        print s[:2]
        if s[0] == -1:
            break
        i += 1
    print 'People allocated = {}'.format(i)
    print '\n' * 3

    # Using i get the remining unprocessed list

    unallocated(d[i:], office.type_of_room)


def unallocated(list, room_type):
    print '==' * 10 + 'List of unallocated ({})' + '==' * 10 \
        + '\n'.format(room_type)
    for z in list:
        print '{}  {: ^10}  {:_>10} '.format(z[0], z[1], z[2])


while True:
    while True:
        print '==' * 10 + 'CHOOSE A TASK ' + '==' * 10 + '\n'
        print '1: Print room Allocations \n'
        print '2: Allocate room\n'
        print '3: View room Occupants\n'
        print '4: View room Status\n'
        print '0: To EXIT program\n'
        print '__' * 20 + '\n'

        try:
            task = int(raw_input('Choose a task: '))

            # if task == 0:
            #     break

            if task in [1, 2, 3, 4, 0]:
                print task
                break
        except:

            print 'ERROR: insert 1,2,3 or 4'

    # --------------------Print room allocations

    if task == 0:
        exit()
    if task is 4:
        view_room_status()

    if task == 1:
        view_room_allocations()

    if task == 3:
        view_room_occupant()

    if task == 2:
        allocate_room()
